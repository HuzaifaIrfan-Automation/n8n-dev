services:
  n8n:
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=le
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker

      - "traefik.http.services.n8n.loadbalancer.server.url=http://n8n:5678"
      # - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      

    env_file:
      - .env


    volumes:
      - ./n8n_data:/home/node/.n8n
      - ./backups:/home/node/backups
    networks:
      - web
      - n8n

    depends_on:
      n8n-postgres:
        condition: service_healthy



  n8n-postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    container_name: n8n-postgres

    env_file:
      - .env

    volumes:
      - ./n8n_db:/var/lib/postgresql/data

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    
    networks:
      - n8n    

networks:
  n8n:
  web:
    external: true
